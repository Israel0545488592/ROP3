import unittest
from time import perf_counter
from numpy.random import randint
from sol import *
from functools import reduce

# These tests can take a minute !

class Tests(unittest.TestCase):

    def test_subsetsum_req(self):

        start = perf_counter()
        
        subsets = [subset for subset in subsetsum_req(3, iter(col1))]

        self.assertEqual(len(subsets), 4)
        self.assertTrue(all_different(subsets))

        for col in cols:
            for subset in subsetsum_req(11, iter(col)):
                self.assertEqual(11, sum(subset))

        print('test1 took: ', perf_counter() - start)

    def test_bounded_subsets(self):

        start = perf_counter()

        for col in cols:

            subsets_in = [subset for subset in subsetsum_req(20, iter(col))]
            subsets_out = [subset for subset in subsetsum_req(20, iter(col))]

            self.assertListEqual(subsets_in, subsets_out)

        print('test2 took: ', perf_counter() - start)

    def test_PowerSetSum(self):

        start = perf_counter()

        # can handle dict 
        subsets = [ subset for subset in PowerSetSum({i : i for i in range(15)}) ]

        # check right size
        self.assertEqual(32768, len(subsets))
        #check all different
        self.assertTrue(all_different(subsets))
        # check if they are well ordered by sum
        self.assertTrue(reduce(lambda bool1, bool2 : bool1 and bool2, map(lambda pair : sum(pair[1]) - sum(pair[0]) in [0, 1],  zip(subsets, subsets[1:]))))

        print('test3 took: ', perf_counter() - start)

        # for the sceptics
        if verbose: print(subsets)





if __name__ == '__main__':

    col1 = list(range(0, 5))
    col2 = tuple(randint(0, 45, 100))
    col3 = set(range(100))
    col4 = range(0, 200, 3)
    cols = [col2, col3, col4]

    # will print a list generated by PowerSetSum if True
    verbose = False

    def all_different(l: list) -> bool: return len({tuple(i) for i in l}) == len(l)

    unittest.main()